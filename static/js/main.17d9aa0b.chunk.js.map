{"version":3,"sources":["EdgeList.js","Button.js","Grid.js","GridSizePicker.js","MainContainer.js","App.js","index.js"],"names":["EdgeList","react_default","a","createElement","className","TextField_default","id","this","props","label","multiline","rowsMax","rows","value","onChange","margin","Component","CustomButton","Button_default","variant","color","onClick","Grid","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","redraw","ctx","canvasReference","current","getContext","clearRect","width","height","background","Image","onload","drawImage","coordinates","getCoordinates","drawCircles","state","lines","length","drawLines","src","_this$props","size","spacing","radius","x","y","push","getPointIdx","point","arrWidth","forEach","line","_line","slicedToArray","start","end","firstPointIdx","secondPointIdx","firstPointCoordinate","secondPointCoordinate","strokeStyle","beginPath","moveTo","lineTo","stroke","coordinate","arc","Math","PI","fill","parseInput","input","edges","dotLimit","split","map","entry","_entry$split","_entry$split2","_start$split$map","i","_start$split$map2","startX","startY","_end$split$map","_end$split$map2","endX","endY","Error","handleDrawButton","setState","previousState","previousProps","e","alert","React","createRef","prevProps","ref","src_Button","action","GridSizePicker","type","InputLabelProps","shrink","autoFocus","MainContainer","changeSize","event","inputValue","target","valueAsNumber","newSize","changeEdges","clearCanvasHandler","console","log","bind","assertThisInitialized","src_GridSizePicker","src_Grid","src_EdgeList","App","src_MainContainer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.17d9aa0b.chunk.js","sourcesContent":["/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* A Textfield that stores the list of Edges to be created */\n/* See the material-ui documentation for more about TextField */\n\nimport TextField from '@material-ui/core/TextField';\nimport React, {Component} from 'react';\n\nclass EdgeList extends Component {\n  render() {\n    return (\n      <div className=\"center-text\">\n        <TextField\n          id={this.props.id}\n          label=\"Edges\"\n          multiline\n          rowsMax={this.props.rows}\n          rows={this.props.rows}\n          value={this.props.value}\n          onChange={this.props.onChange}\n          className={this.props.className}\n          margin=\"normal\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default EdgeList;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* A simple Button class */\n\nimport Button from '@material-ui/core/Button';\nimport React, {Component} from 'react';\n\nclass CustomButton extends Component {\n  render() {\n    return (\n      <div className=\"center-text button\">\n        <Button variant=\"contained\" color={this.props.color} onClick={this.props.onClick}>\n          {this.props.value}\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default CustomButton;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* A simple grid with a variable size */\n/* Most of the assignment involves changes to this class */\n\nimport Button from './Button'\nimport React, {Component} from 'react';\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasReference = React.createRef();\n    this.state = {\n      lines : []\n    }\n  }\n\n  componentDidMount() {\n    this.redraw();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.size !== prevProps.size || this.props.edges !== prevProps.edges) {\n      this.setState((previousState, previousProps) => {\n        return {\n          lines : []\n        };\n      });\n    }\n    this.redraw()\n  }\n\n  redraw = () => {\n    const ctx = this.canvasReference.current.getContext('2d');\n    ctx.clearRect(0, 0, this.props.width, this.props.height);\n    const background = new Image();\n    background.onload = () => {\n      ctx.drawImage(background,0,0);\n      const coordinates = this.getCoordinates();\n      this.drawCircles(ctx, coordinates);\n      if (this.state.lines.length !== 0) {\n        this.drawLines(ctx, coordinates);\n      }\n    }\n    background.src = './image.jpg';\n  };\n\n  getCoordinates = () => {\n    const coordinates = [];\n    const { width, size } = this.props;\n    const spacing = width / (size + 1);\n    const radius = 20 / size;\n    for (let x = spacing; x < width - radius; x+= spacing) {\n      for (let y = spacing; y < width - radius; y+= spacing) {\n        coordinates.push([x, y]);\n      }\n    }\n    return coordinates;\n  };\n\n  drawLines = (ctx, coordinates) => {\n    const {lines} = this.state;\n    function getPointIdx (point, arrWidth) {\n      return point[0] * arrWidth + point[1];\n    }\n    lines.forEach(line => {\n      const [start, end, color] = line;\n      const firstPointIdx = getPointIdx(start, this.props.size);\n      const secondPointIdx = getPointIdx(end, this.props.size);\n      const firstPointCoordinate = coordinates[firstPointIdx];\n      const secondPointCoordinate = coordinates[secondPointIdx];\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      ctx.moveTo(firstPointCoordinate[0], firstPointCoordinate[1]);\n      ctx.lineTo(secondPointCoordinate[0], secondPointCoordinate[1]);\n      ctx.stroke();\n    });\n  };\n\n  drawCircles = (ctx, coordinates) => {\n    coordinates.forEach(coordinate => {\n      ctx.beginPath();\n      ctx.arc(coordinate[0], coordinate[1], 20 / this.props.size, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  };\n\n  parseInput = () => {\n    const input = this.props.edges;\n    const dotLimit = this.props.size;\n    const entries = input.split('\\n');\n    const lines = entries.map(entry => {\n      const [start, end, color] = entry.split(' ');\n      const [startX, startY] = start.split(',').map(i => +i);\n      const [endX, endY] = end.split(',').map(i => +i);\n\n      if (startX < 0 || startX >= dotLimit || \n        startY < 0 || startY >= dotLimit ||\n        endX < 0 || endX >= dotLimit ||\n        endY < 0 || endY >= dotLimit\n      ) {\n        const err = new Error(\"Not valid Input \" + entry);\n        throw err;\n      }\n      return [[startX, startY], [endX, endY], color];\n    });\n    return lines;\n  }\n\n  handleDrawButton = () => {\n    try {\n      const lines = this.parseInput();\n      this.setState((previousState, previousProps) => {\n        return {\n          lines\n        };\n      });\n    } catch (e) {\n      alert(\"Cannot draw line cause edges input is not valid. Please fix!\\n\" +\n        e);\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"canvas-div\">\n        <canvas ref={this.canvasReference} width={this.props.width} height={this.props.height} />\n        <div className=\"center-text\">Current Grid Size: {this.props.size}</div>\n        <Button color=\"primary\" onClick={this.handleDrawButton} value=\"Draw\" />\n        <Button color=\"secondary\" onClick={this.props.action} value=\"Clear\" />\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* A simple TextField that only allows numerical input */\n\nimport TextField from '@material-ui/core/TextField';\nimport React, {Component} from 'react';\n\nclass GridSizePicker extends Component {\n  render() {\n    return (\n      <div className=\"center-text\">\n        <p>Pick the Grid Size:</p>\n        <TextField\n          id={this.props.id}\n          label={this.props.label}\n          value={this.props.value}\n          onChange={this.props.onChange}\n          type=\"number\"\n          className={this.props.className}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          autoFocus\n        />\n      </div>\n    );\n  }\n}\n\nexport default GridSizePicker;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* The main component that holds all the other elements of the React App */\n\nimport EdgeList from './EdgeList';\nimport Grid from './Grid'\nimport GridSizePicker from './GridSizePicker'\nimport React, {Component} from 'react';\n\nclass MainContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      edges: \"\",\n      size: 3,\n    }\n    this.clearCanvasHandler = this.clearCanvasHandler.bind(this);\n  }\n\n  changeSize = (event) => {\n    const inputValue = event.target.valueAsNumber;\n    let newSize = inputValue >= 0 && inputValue <= 200? inputValue : 3;\n    this.setState((previousState, previousProps) => {\n      return {\n        edges: \"\",\n        size: newSize,\n      };\n    });\n  }\n\n  changeEdges = (event) => {\n    const inputValue = event.target.value;\n    this.setState((previousState, previousProps) => {\n      return {\n        edges: inputValue ,\n        size: previousState.size,\n      };\n    });\n  }\n\n  clearCanvasHandler = () => {\n    console.log(\"clear\");\n    this.setState({\n      edges: \"\",\n      size: 3,\n    })\n  }\n\n\n  render() {\n    let gridSize = 400;\n    return (\n      <div>\n        <GridSizePicker\n          onChange={this.changeSize}\n          value={this.state.size}\n        />\n        <Grid\n          action={this.clearCanvasHandler}\n          edges={this.state.edges}\n          height={gridSize}\n          size={this.state.size}\n          width={gridSize}\n        />\n        <EdgeList \n          onChange={this.changeEdges}\n          rows={5}\n          value={this.state.edges}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MainContainer;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* The main React class that is called from index.js */\n/* index.js creates this Component and everything else is inside it. */\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport MainContainer from './MainContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*\n * Copyright ©2019 Hal Perkins.  All rights reserved.  Permission is\n * hereby granted to students registered for University of Washington\n * CSE 331 for use solely during Spring Quarter 2019 for purposes of\n * the course.  No other use, copying, distribution, or modification\n * is permitted without prior written consent. Copyrights for\n * third-party components of this work must be honored.  Instructors\n * interested in reusing these course materials should contact the\n * author.\n */\n\n/* Simple JS file that sets up the React App */\n/* Do not change this file. */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}